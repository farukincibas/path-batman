[{"C:\\Users\\faruk\\OneDrive\\Documents\\GitHub\\path-batman\\src\\reportWebVitals.js":"1","C:\\Users\\faruk\\OneDrive\\Documents\\GitHub\\path-batman\\src\\index.js":"2","C:\\Users\\faruk\\OneDrive\\Documents\\GitHub\\path-batman\\src\\App.js":"3","C:\\Users\\faruk\\OneDrive\\Documents\\GitHub\\path-batman\\src\\BatmanCard.js":"4"},{"size":362,"mtime":1606297851569,"results":"5","hashOfConfig":"6"},{"size":547,"mtime":1611337863539,"results":"7","hashOfConfig":"6"},{"size":162,"mtime":1611338677758,"results":"8","hashOfConfig":"6"},{"size":5035,"mtime":1611362548978,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sj5rkd",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\faruk\\OneDrive\\Documents\\GitHub\\path-batman\\src\\reportWebVitals.js",[],"C:\\Users\\faruk\\OneDrive\\Documents\\GitHub\\path-batman\\src\\index.js",[],"C:\\Users\\faruk\\OneDrive\\Documents\\GitHub\\path-batman\\src\\App.js",[],"C:\\Users\\faruk\\OneDrive\\Documents\\GitHub\\path-batman\\src\\BatmanCard.js",["18","19","20","21"],{"ruleId":"22","severity":1,"message":"23","line":15,"column":15,"nodeType":"24","endLine":115,"endColumn":6},{"ruleId":"25","severity":1,"message":"26","line":55,"column":44,"nodeType":"24","messageId":"27","endLine":55,"endColumn":46},{"ruleId":"25","severity":1,"message":"26","line":60,"column":44,"nodeType":"24","messageId":"27","endLine":60,"endColumn":46},{"ruleId":"28","severity":1,"message":"29","line":61,"column":40,"nodeType":"30","messageId":"31","endLine":61,"endColumn":42},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]